{"version":3,"sources":["webpack:///./src/design-tokens/introduction.mdx","webpack:///./src/design-tokens/tokens.png"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent","module","exports"],"mappings":"iQAMO,MAAMA,EAAe,Q,oNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,8JACL,qBAAK,6DAA4D,6BAAGC,WAAW,KAAQ,CACnF,KAAQ,eACL,2BACP,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,0DACL,uBAAK,gCAAMA,WAAW,OAAU,IAAM,yCAEtC,iBAAQ,CACN,GAAM,cACH,cACL,qBAAK,kGACL,uBAAK,gCAAMA,WAAW,OAAU,IAAM,sEAEtC,qBAAK,8FACL,uBAAK,gCAAMA,WAAW,OAAU,IAAM,2CAEtC,qBAAK,8HAA6H,0BAAYA,WAAW,KAAM,uBAAoC,OAAM,0BAAYA,WAAW,KAAM,4BAAyC,KAC/Q,qBAAK,+CAA8C,6BAAGA,WAAW,KAAQ,CACrE,KAAQ,aACL,eAAmB,KAC1B,iBAAQ,CACN,GAAM,qBACH,qBACL,qBAAK,6IACL,sBACE,kBAAIA,WAAW,MAAO,eAAc,0BAAYA,WAAW,MAAO,qBAClE,kBAAIA,WAAW,MAAO,QAAO,0BAAYA,WAAW,MAAO,uBAC3D,kBAAIA,WAAW,MAAO,SAAQ,0BAAYA,WAAW,MAAO,uBAE9D,iBAAQ,CACN,GAAM,UACH,UACL,qBAAK,oDAAmD,sBAAQA,WAAW,KAAM,cAAuB,kCAAiC,sBAAQA,WAAW,KAAM,QAAiB,QAAO,sBAAQA,WAAW,KAAM,OAAgB,KACnO,iBAAQ,CACN,GAAM,0BACH,0BACL,qBAAG,mBAAKC,IAAI,gBAAgBC,IAAKC,EAAQ,WACzC,iBAAQ,CACN,GAAM,iBACH,iBACL,qBAAK,uLACL,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,wNACL,iBAAQ,CACN,GAAM,6BACH,6BACL,qBAAK,gS,kNAKTP,EAAWQ,gBAAiB,G,qBC7E5BC,EAAOC,QAAU,IAA0B","file":"component---src-design-tokens-introduction-mdx-cc45f80f1e71120c1c1a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/match/match/.yarn/$$virtual/gatsby-theme-docz-virtual-74309457d1/0/cache/gatsby-theme-docz-npm-2.3.1-368175878c-ce291a4787.zip/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`Design tokens are tiny pieces of UI information that are used to ensure brand consistency and product design-engineer collaboration across all properties.`}</p>\n    <p>{`⚠️ Design tokens and theming is still a work in progress. `}<a parentName=\"p\" {...{\n        \"href\": \"../roadmap\"\n      }}>{`Check out our roadmap!`}</a></p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`Run the following command at the root of your project:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add @twilio-labs/match-tokens\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use`}</h2>\n    <p>{`To use Twilio design tokens, add an import in the file where you want to use the design tokens`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { TwilioDesignTokens } from \"@twilio-labs/match-tokens\";\n`}</code></pre>\n    <p>{`Following the imports add the following line to create a new instance of the design tokens`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const ds = new TwilioDesignTokens();\n`}</code></pre>\n    <p>{`Now you can use the tokens by typing ds and continuing the dot notation with the token name and token value. For instance, `}<inlineCode parentName=\"p\">{`ds.breakpoint.small`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ds.swatch.baseBlue.color`}</inlineCode>{`.`}</p>\n    <p>{`See the complete list of token names on the `}<a parentName=\"p\" {...{\n        \"href\": \"./tokens\"\n      }}>{`tokens page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"naming-convention\"\n    }}>{`Naming Convention`}</h2>\n    <p>{`Every token name on Match starts with its related CSS property such as Fontweight and Breakpoint and is then followed by the token value.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`JavaScript: `}<inlineCode parentName=\"li\">{`breakpoint.small`}</inlineCode></li>\n      <li parentName=\"ul\">{`CSS: `}<inlineCode parentName=\"li\">{`--breakpoint-small`}</inlineCode></li>\n      <li parentName=\"ul\">{`SASS: `}<inlineCode parentName=\"li\">{`$breakpoint-small`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <p>{`The preferred format for Match design tokens is: `}<strong parentName=\"p\">{`JavaScript`}</strong>{`. Other supported formats are: `}<strong parentName=\"p\">{`SASS`}</strong>{` and `}<strong parentName=\"p\">{`CSS`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"types-of-design-tokens\"\n    }}>{`Types of Design Tokens`}</h2>\n    <p><img alt=\"Token Diagram\" src={require(\"./tokens.png\")} /></p>\n    <h3 {...{\n      \"id\": \"global-tokens\"\n    }}>{`Global Tokens`}</h3>\n    <p>{`They are the primitive values in our design system and they are represented by context-agnostic names. Typography, color pallet, animation values are all stored as a global token.`}</p>\n    <h3 {...{\n      \"id\": \"alias-tokens\"\n    }}>{`Alias Tokens`}</h3>\n    <p>{`These tokens relate to a specific context or abstraction. Aliases helps us to communicate the intended purpose of the token and are much effective when a value with a single intent will appear in multiple places.`}</p>\n    <h3 {...{\n      \"id\": \"component-specific-tokens\"\n    }}>{`Component-Specific Tokens`}</h3>\n    <p>{`These type of tokens are an exhaustive representation of every value associated with a component. They often inherit from alias tokens, but are named in such a way that it allows engineering teams to be as specific as possible in applying token in development of the components.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/tokens-79ffdd471889556afe2018b332d87d9f.png\";"],"sourceRoot":""}