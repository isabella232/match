(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"A/Ha":function(e,t,n){e.exports=n.p+"static/tokens-b71925e68052f43f7cb2fd3e4e5caa87.png"},p5NF:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n("snL0"),o=n("GerQ"),i=(n("Ezei"),n("eHXc")),r=n("JABY");n("j1N8");const s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/design-tokens/introduction.mdx"}});const c={_frontmatter:s},l=r.a;function p(e){let{components:t}=e,r=Object(o.a)(e,["components"]);return Object(i.b)(l,Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Design tokens are tiny pieces of UI information that are used to ensure brand\nconsistency and design-engineer collaboration across all properties."),Object(i.b)("div",{style:{border:"solid 1px purple",padding:"20px 28px"}},Object(i.b)("p",null,"⚠️ Design tokens and theming is still a ",Object(i.b)("strong",null,"work in progress"),". Check out the roadmap to learn more!")),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Run the following command at the root of your project:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"yarn add @twilio-labs/match-tokens\n")),Object(i.b)("h2",{id:"how-to-use"},"How to use"),Object(i.b)("p",null,"To use Twilio design tokens, import the appropriate theme provider in the root of your React application."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import * as React from "react";\nimport { TwilioTheme } from "@twilio-labs/match-themes";\n\nconst App: React.FC = ({ children }) => <TwilioTheme>{children}</TwilioTheme>;\nexport { App };\n')),Object(i.b)("p",null,"You can then access tokens within a styled component using the ",Object(i.b)("inlineCode",{parentName:"p"},"theme")," prop."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const Component = styled.div`\n  background: ${({ theme }) => theme.swatch.brand.color};\n  text-align: center;\n`;\n")),Object(i.b)("p",null,"Or within a component using the ",Object(i.b)("inlineCode",{parentName:"p"},"useTheme")," hook."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import * as React from "react";\nimport { useTheme } from "@twilio-labs/match-themes";\n\nconst Component: React.FC = () => {\n  const theme = useTheme();\n  return <div>{theme.breakpoint.small.mediaQuery}</div>;\n};\n')),Object(i.b)("p",null,"Tokens are read using dot notation with the token name and token value. For instance, ",Object(i.b)("inlineCode",{parentName:"p"},"theme.breakpoint.small.mediaQuery")," or ",Object(i.b)("inlineCode",{parentName:"p"},"theme.swatch.baseBlue.color"),"."),Object(i.b)("p",null,"See the complete list of token names on the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"./tokens"}),"tokens page"),"."),Object(i.b)("h2",{id:"naming-convention"},"Naming Convention"),Object(i.b)("p",null,"Every token name on Match starts with its related CSS property such as Font Weight and Breakpoint and is then followed by the token value."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"JavaScript: ",Object(i.b)("inlineCode",{parentName:"li"},"breakpoint.small.mediaQuery")),Object(i.b)("li",{parentName:"ul"},"CSS: ",Object(i.b)("inlineCode",{parentName:"li"},"--breakpoint-small")),Object(i.b)("li",{parentName:"ul"},"SASS: ",Object(i.b)("inlineCode",{parentName:"li"},"$breakpoint-small"))),Object(i.b)("h2",{id:"format"},"Format"),Object(i.b)("p",null,"The preferred format for Match design tokens is: ",Object(i.b)("strong",{parentName:"p"},"JavaScript"),". Other supported formats are: ",Object(i.b)("strong",{parentName:"p"},"SASS")," and ",Object(i.b)("strong",{parentName:"p"},"CSS"),"."),Object(i.b)("h2",{id:"types-of-design-tokens"},"Types of Design Tokens"),Object(i.b)("p",null,Object(i.b)("img",{alt:"Token Diagram",src:n("A/Ha")})),Object(i.b)("h3",{id:"global-tokens"},"Global Tokens"),Object(i.b)("p",null,"They are the primitive values in our design system and they are represented by context-agnostic names. Typography, color pallet, animation values are all stored as a global token."),Object(i.b)("h3",{id:"alias-tokens"},"Alias Tokens"),Object(i.b)("p",null,"These tokens relate to a specific context or abstraction. Aliases helps us to communicate the intended purpose of the token and are much effective when a value with a single intent will appear in multiple places."),Object(i.b)("h3",{id:"component-specific-tokens"},"Component-Specific Tokens"),Object(i.b)("p",null,"These type of tokens are an exhaustive representation of every value associated with a component. They often inherit from alias tokens, but are named in such a way that it allows engineering teams to be as specific as possible in applying token in development of the components."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/design-tokens/introduction.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-design-tokens-introduction-mdx-2f38f5c1b6f4a7ab663c.js.map