{"version":3,"sources":["webpack:///./src/docs/design-tokens/tokens.png","webpack:///./src/docs/design-tokens/introduction.mdx"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","style","parentName","alt","src","require","isMDXComponent"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,sD,wMCMpC,MAAMC,EAAe,Q,yNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,uJAEL,mBAAKC,MAAO,CACV,OAAU,mBACV,QAAW,cAEf,gEAC0C,8CAD1C,2CAKE,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,0DACL,uBAAK,gCAAMC,WAAW,OAAU,IAAM,yCAEtC,iBAAQ,CACN,GAAM,cACH,cACL,qBAAK,6GACL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBACV,mMAMP,qBAAK,kEAAiE,0BAAYA,WAAW,KAAM,SAAsB,UACzH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBACV,0HAKP,qBAAK,mCAAkC,0BAAYA,WAAW,KAAM,YAAyB,UAC7F,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBACV,+NAQP,qBAAK,yFAAwF,0BAAYA,WAAW,KAAM,qCAAkD,OAAM,0BAAYA,WAAW,KAAM,+BAA4C,KAC3P,qBAAK,+CAA8C,6BAAGA,WAAW,KAAQ,CACrE,KAAQ,aACL,eAAmB,KAC1B,iBAAQ,CACN,GAAM,qBACH,qBACL,qBAAK,8IACL,sBACE,kBAAIA,WAAW,MAAO,eAAc,0BAAYA,WAAW,MAAO,gCAClE,kBAAIA,WAAW,MAAO,QAAO,0BAAYA,WAAW,MAAO,uBAC3D,kBAAIA,WAAW,MAAO,SAAQ,0BAAYA,WAAW,MAAO,uBAE9D,iBAAQ,CACN,GAAM,UACH,UACL,qBAAK,oDAAmD,sBAAQA,WAAW,KAAM,cAAuB,kCAAiC,sBAAQA,WAAW,KAAM,QAAiB,QAAO,sBAAQA,WAAW,KAAM,OAAgB,KACnO,iBAAQ,CACN,GAAM,0BACH,0BACL,qBAAG,mBAAKC,IAAI,gBAAgBC,IAAKC,EAAQ,WACzC,iBAAQ,CACN,GAAM,iBACH,iBACL,qBAAK,uLACL,iBAAQ,CACN,GAAM,gBACH,gBACL,qBAAK,wNACL,iBAAQ,CACN,GAAM,6BACH,6BACL,qBAAK,gS,uNAKTR,EAAWS,gBAAiB","file":"component---src-docs-design-tokens-introduction-mdx-2f38f5c1b6f4a7ab663c.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/tokens-b71925e68052f43f7cb2fd3e4e5caa87.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/match/match/.yarn/$$virtual/gatsby-theme-docz-virtual-74309457d1/0/cache/gatsby-theme-docz-npm-2.3.1-368175878c-ce291a4787.zip/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`Design tokens are tiny pieces of UI information that are used to ensure brand\nconsistency and design-engineer collaboration across all properties.`}</p>\n    <div style={{\n      \"border\": \"solid 1px purple\",\n      \"padding\": \"20px 28px\"\n    }}>\n  <p>\n    ⚠️ Design tokens and theming is still a <strong>work in progress</strong>.\n    Check out the roadmap to learn more!\n  </p>\n    </div>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`Run the following command at the root of your project:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add @twilio-labs/match-tokens\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use`}</h2>\n    <p>{`To use Twilio design tokens, import the appropriate theme provider in the root of your React application.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from \"react\";\nimport { TwilioTheme } from \"@twilio-labs/match-themes\";\n\nconst App: React.FC = ({ children }) => <TwilioTheme>{children}</TwilioTheme>;\nexport { App };\n`}</code></pre>\n    <p>{`You can then access tokens within a styled component using the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const Component = styled.div\\`\n  background: \\${({ theme }) => theme.swatch.brand.color};\n  text-align: center;\n\\`;\n`}</code></pre>\n    <p>{`Or within a component using the `}<inlineCode parentName=\"p\">{`useTheme`}</inlineCode>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from \"react\";\nimport { useTheme } from \"@twilio-labs/match-themes\";\n\nconst Component: React.FC = () => {\n  const theme = useTheme();\n  return <div>{theme.breakpoint.small.mediaQuery}</div>;\n};\n`}</code></pre>\n    <p>{`Tokens are read using dot notation with the token name and token value. For instance, `}<inlineCode parentName=\"p\">{`theme.breakpoint.small.mediaQuery`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`theme.swatch.baseBlue.color`}</inlineCode>{`.`}</p>\n    <p>{`See the complete list of token names on the `}<a parentName=\"p\" {...{\n        \"href\": \"./tokens\"\n      }}>{`tokens page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"naming-convention\"\n    }}>{`Naming Convention`}</h2>\n    <p>{`Every token name on Match starts with its related CSS property such as Font Weight and Breakpoint and is then followed by the token value.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`JavaScript: `}<inlineCode parentName=\"li\">{`breakpoint.small.mediaQuery`}</inlineCode></li>\n      <li parentName=\"ul\">{`CSS: `}<inlineCode parentName=\"li\">{`--breakpoint-small`}</inlineCode></li>\n      <li parentName=\"ul\">{`SASS: `}<inlineCode parentName=\"li\">{`$breakpoint-small`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <p>{`The preferred format for Match design tokens is: `}<strong parentName=\"p\">{`JavaScript`}</strong>{`. Other supported formats are: `}<strong parentName=\"p\">{`SASS`}</strong>{` and `}<strong parentName=\"p\">{`CSS`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"types-of-design-tokens\"\n    }}>{`Types of Design Tokens`}</h2>\n    <p><img alt=\"Token Diagram\" src={require(\"./tokens.png\")} /></p>\n    <h3 {...{\n      \"id\": \"global-tokens\"\n    }}>{`Global Tokens`}</h3>\n    <p>{`They are the primitive values in our design system and they are represented by context-agnostic names. Typography, color pallet, animation values are all stored as a global token.`}</p>\n    <h3 {...{\n      \"id\": \"alias-tokens\"\n    }}>{`Alias Tokens`}</h3>\n    <p>{`These tokens relate to a specific context or abstraction. Aliases helps us to communicate the intended purpose of the token and are much effective when a value with a single intent will appear in multiple places.`}</p>\n    <h3 {...{\n      \"id\": \"component-specific-tokens\"\n    }}>{`Component-Specific Tokens`}</h3>\n    <p>{`These type of tokens are an exhaustive representation of every value associated with a component. They often inherit from alias tokens, but are named in such a way that it allows engineering teams to be as specific as possible in applying token in development of the components.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}