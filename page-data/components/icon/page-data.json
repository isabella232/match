{"componentChunkName":"component---src-templates-doc-tsx","path":"/components/icon/","result":{"data":{"mdx":{"fields":{"title":"Icon","description":"Icons are visual symbols and indicators that support an action or function in an user interface. They can also be used to enhance or represent content.","slug":"/components/icon/","figma":"","github":"https://github.com/twilio-labs/match/blob/main/packages/match-icons"},"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/8701076d51d82fdbddc1c77100e40170/59c75/icon.png","srcSet":"/static/8701076d51d82fdbddc1c77100e40170/b0ba4/icon.png 95w,\n/static/8701076d51d82fdbddc1c77100e40170/03b05/icon.png 190w,\n/static/8701076d51d82fdbddc1c77100e40170/59c75/icon.png 380w,\n/static/8701076d51d82fdbddc1c77100e40170/7c533/icon.png 760w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/8701076d51d82fdbddc1c77100e40170/1d5f8/icon.webp 95w,\n/static/8701076d51d82fdbddc1c77100e40170/bd4ab/icon.webp 190w,\n/static/8701076d51d82fdbddc1c77100e40170/322d9/icon.webp 380w,\n/static/8701076d51d82fdbddc1c77100e40170/4d97e/icon.webp 760w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":320}}}},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": \"icon\",\n  \"title\": \"Icon\",\n  \"section\": \"Components\",\n  \"description\": \"Icons are visual symbols and indicators that support an action or function in an user interface. They can also be used to enhance or represent content.\",\n  \"image\": \"../../images/docs/components/icon.png\",\n  \"github\": \"https://github.com/twilio-labs/match/blob/main/packages/match-icons\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Code`), mdx(\"h3\", null, `Usage`), mdx(\"p\", null, `There are currently 3 supported icon packages. `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@twilio-labs/match-icons-twilio`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@twilio-labs/match-icons-sendgrid`), `, and the universal `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@twilio-labs/match-icons-product`), `. Icons are imported individually from their respective packages. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@twilio-labs/match-icons-twilio`), ` package requires a valid Streamline license. Ensure that you have a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `STREAMLINE_SECRET`), ` environment variable set with the license key found on the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://app.streamlinehq.com/profile/developer\"\n  }, `Streamline developer page`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, `import { ChatIcon } from \"@twilio-labs/match-icons-twilio\";\n\nconst Component = () => <ChatIcon decorative />;\n`)), mdx(\"h3\", null, `Props`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Prop`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Type`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `color?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Color`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'gray80'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'white', 'baseRed', 'blue50', 'blue60', 'blue80', 'baseGreen', 'baseOrange', 'basePurple', 'gray80', 'gray90', 'gray100'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `size?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `IconSize`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'base'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'small', 'medium', 'base', 'large', 'xLarge'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `title?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Accessibility text provided to screenreaders.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `decorative?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `false`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Determines if icon is decorative or informative. Decorative icon titles are not read by screenreaders.`)))), mdx(\"p\", null, `Also supports `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/#margin-props\"\n  }, `margin`), ` props.`), mdx(\"hr\", null), mdx(\"h2\", null, `Guidelines`), mdx(\"h3\", null, `About Icons`), mdx(\"p\", null, `Informative icons may be used to clarify actions a user may take or draw attention to specific UI elements. Decorative icons do not add information to the page and are included for visual enhancements only.`), mdx(\"h3\", null, `Accessibility`), mdx(\"p\", null, `Here are some quick accessibility tips to ensure a positive user experience for all users:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Always include a title for icons that are not purely decorative.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Titles should provide additional context to the icon rather than describe the image.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Pair icons with descriptive text whenever possible.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Icons should not be interactive. They may be used within an interactive components, such as the Button.`)), mdx(\"hr\", null), mdx(\"h2\", null, `Examples`), mdx(\"h3\", null, `Icon Color`), mdx(\"p\", null, `The default icon color may be altered using a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../design-tokens/tokens.mdx#colors\"\n  }, `color token`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<ChatIcon decorative color=\"basePurple\" />\n`)), mdx(\"h3\", null, `Icon Size`), mdx(\"p\", null, `The size may be adjusted with an `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../design-tokens/tokens.mdx#icon-sizes\"\n  }, `icon size token`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <ChatIcon decorative size=\"small\" />\n  <br />\n  <ChatIcon decorative size=\"medium\" />\n  <br />\n  <ChatIcon decorative size=\"base\" />\n  <br />\n  <ChatIcon decorative size=\"large\" />\n  <br />\n  <ChatIcon decorative size=\"xLarge\" />\n</>\n`)), mdx(\"p\", null, `Icon size accepts `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://styled-system.com/responsive-styles#responsive-styles\"\n  }, `responsive values`), `.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<ChatIcon decorative size={[\"large\", \"medium\"]} />\n`)), mdx(\"h3\", null, `Decorative Icons`), mdx(\"p\", null, `Titles are required for accessibility compliance unless the icon is specifically designated as decorative.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <ChatIcon title=\"Talk to me!\" />\n  <br />\n  <ChatIcon decorative />\n</>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c6849591-463f-57f4-9a30-852ccc0264be"}},"staticQueryHashes":["1936978686"]}