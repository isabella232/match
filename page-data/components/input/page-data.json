{"componentChunkName":"component---src-templates-doc-tsx","path":"/components/input/","result":{"data":{"mdx":{"fields":{"title":"Input","description":"The input component allows users to input a value. Inputs can be used for text, email, passwords and numbers.","slug":"/components/input/","figma":"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=733%3A723","github":"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/input"},"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/6b99e4d74f44f7a74580c575bda86bc9/185a0/input.png","srcSet":"/static/6b99e4d74f44f7a74580c575bda86bc9/f740e/input.png 95w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/f85ed/input.png 190w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/185a0/input.png 380w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/25264/input.png 760w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/6b99e4d74f44f7a74580c575bda86bc9/847ad/input.webp 95w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/6fd64/input.webp 190w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/656fb/input.webp 380w,\n/static/6b99e4d74f44f7a74580c575bda86bc9/ada0a/input.webp 760w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":291}}}},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": \"input\",\n  \"title\": \"Input\",\n  \"section\": \"Components\",\n  \"description\": \"The input component allows users to input a value. Inputs can be used for text, email, passwords and numbers.\",\n  \"image\": \"../../images/docs/components/input.png\",\n  \"figma\": \"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=733%3A723\",\n  \"github\": \"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/input\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Code`), mdx(\"h3\", null, `Installation`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, `yarn add @twilio-labs/match formik\n`)), mdx(\"h3\", null, `Usage`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, `import { Formik } from \"formik\";\nimport { Input, Form } from \"@twilio-labs/match/components\";\n\nconst Component = () => (\n  <Formik initialValues={{ email: \"\" }} onSubmit={() => {}}>\n    <Form>\n      <Input name=\"email\" label=\"Email Address\" type=\"email\" />\n    </Form>\n  </Formik>\n);\n`)), mdx(\"h3\", null, `Props`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Prop`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Type`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `name`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `label`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `type?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `InputType`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'text'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'number', 'text', 'tel', 'url', 'email', 'password'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `size?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `InputSize`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'normal'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'normal', 'small'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `required?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input as required.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `disabled?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Disables the input.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `readOnly?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input as readonly.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `hideLabel?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Visually hides the label.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `placeholder?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input's placeholder text.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `helper?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Supporting validation instructions.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `validate?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `(value: string) => string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Overrides built in validation.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `noValidate?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Disables built in validation.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `minLength?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `number`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Minimum character length.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `maxLength?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `number`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Maximum character length.`)))), mdx(\"hr\", null), mdx(\"h2\", null, `Guidelines`), mdx(\"h3\", null, `About Inputs`), mdx(\"p\", null, `Inputs are interactive form controls that accept a single line of text from a user. By default, inputs accept any combination of letters number and symbols. They can be given constraints by setting the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `type`), ` attribute to one of number, tel, url, or email. Inputs with specific types may also provide customized keyboard layouts in browsers and devices that support dynamic keyboards.`), mdx(\"h3\", null, `Accessibility`), mdx(\"p\", null, `Here are some quick accessibility tips to ensure a positive user experience for all users.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Always include a descriptive label for each Input.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Do not use placeholder text as a replacement for labels.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use the most appropriate input type for the data requested (e.g. text, email, or url).`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `helper`), ` to provide information on how to pass the Input's validation.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use error messages to provide information on how to correct invalid data.`)), mdx(\"hr\", null), mdx(\"h2\", null, `Composition`), mdx(\"p\", null, `All Inputs must include a label. A label may be visually hidden only if the purpose of the Input is abundantly apparent. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `hideLabel`), ` prop will remove the label entirely and apply an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `aria-label`), ` to the input element for screen readers.`), mdx(\"p\", null, `Labels should be short and descriptive with any instructional text belonging in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `helper`), `. Keep supplemental helper text concise and relevant to the input's validation requirements.`), mdx(\"p\", null, `When an Input contains invalid data, provide an error message with instructional cues on how to make the correction. Any `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `helper`), ` text provided with the Input will be replaced by the error. Be sure to repeat any relevant information that would have been lost.`), mdx(\"p\", null, `Inputs should only be used on a white background.`), mdx(Guidelines, {\n    mdxType: \"Guidelines\"\n  }, mdx(Do, {\n    mdxType: \"Do\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Only use placeholder text when clarifying examples are required. Try not to overuse it as it can cause clutter and confusion for a user.\"), mdx(\"li\", null, \"Use help text to provide additional information to the user that could help prevent errors.\"), mdx(\"li\", null, \"Use disabled to show a user that an input can not be interacted with yet.\"))), mdx(DoNot, {\n    mdxType: \"DoNot\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Don't use placeholder text for every field.\"), mdx(\"li\", null, \"Don't use placeholder text to provide error preventing information.\"), mdx(\"li\", null, \"Don't use disabled to show information in an input that can not be edited.\")))), mdx(\"hr\", null), mdx(\"h2\", null, `Examples`), mdx(\"h3\", null, `Input with Help Text`), mdx(\"p\", null, `Labels and help text are controlled via the Input component props in order to ensure consistency and accessibility best practices.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Formik initialValues={{ email: \"\" }} onSubmit={() => {}}>\n  <Form>\n    <Input\n      type=\"email\"\n      name=\"email\"\n      label=\"Email Address\"\n      placeholder=\"(e.g. example@twilio.com)\"\n      helper=\"Please enter a valid email.\"\n      required\n    />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Input with Error`), mdx(\"p\", null, `Inputs come with basic `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\"\n  }, `constraint validation`), ` enabled by default. You may override the built in validation with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `validate`), ` prop, or completely disable with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `noValidate`), `. For more advanced validation please read the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://formik.org/docs/guides/validation\"\n  }, `Formik documentation`), `. Note that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `helper`), ` text is replaced by the validation error.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Formik\n  validateOnMount\n  initialTouched={{ email: true }}\n  initialValues={{ email: \"@twilio.com\" }}\n  onSubmit={() => {}}\n>\n  <Form>\n    <Input\n      type=\"email\"\n      name=\"email\"\n      label=\"Email Address\"\n      helper=\"Please enter a valid email.\"\n      required\n    />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Disabled Input`), mdx(\"p\", null, `Disabled form fields cannot be interacted with. Use a read-only field for showing static information which cannot be edited.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Formik initialValues={{ email: \"\" }} onSubmit={() => {}}>\n  <Form>\n    <Input type=\"email\" name=\"email\" label=\"Email Address\" disabled />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Read-only Input`), mdx(\"p\", null, `Read-only inputs can be focused but cannot be edited. Use a read-only Input when a user should be able to select and copy the text within. An example of when to use a read-only input may be displaying a user's responses after a form has been submitted.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<Formik initialValues={{ email: \"example@twilio.com\" }} onSubmit={() => {}}>\n  <Form>\n    <Input type=\"email\" name=\"email\" label=\"Email Address\" readOnly />\n  </Form>\n</Formik>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"db279df4-53fe-5999-8e5e-b367bdbee16d"}},"staticQueryHashes":["1936978686"]}