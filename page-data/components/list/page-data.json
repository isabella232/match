{"componentChunkName":"component---src-templates-doc-tsx","path":"/components/list/","result":{"data":{"mdx":{"fields":{"title":"List","description":"Lists are simple groupings of related text or images, formatted vertically. List items typically begin with a bullet point or number.","slug":"/components/list/","figma":"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=1873%3A4251","github":"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/list"},"frontmatter":{"image":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": \"list\",\n  \"title\": \"List\",\n  \"section\": \"Components\",\n  \"description\": \"Lists are simple groupings of related text or images, formatted vertically. List items typically begin with a bullet point or number.\",\n  \"figma\": \"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=1873%3A4251\",\n  \"github\": \"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/list\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Code`), mdx(\"h3\", null, `Usage`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, `import { List, ListItem } from \"@twilio-labs/match/components\";\n\nconst Component = () => (\n  <List>\n    <ListItem>Ahoy</ListItem>\n    <ListItem>World</ListItem>\n  </List>\n);\n`)), mdx(\"h3\", null, `List Props`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Prop`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Type`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `variant?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `ListVariant`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'bulleted'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'bulleted', 'numbered', 'icon'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `size?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `ListSize`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'normal'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'normal', 'small'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `inverse?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `false`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Use inverse styles on dark backgrounds.`)))), mdx(\"p\", null, `Also supports `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/#margin-props\"\n  }, `margin`), ` props.`), mdx(\"h3\", null, `List Item Props`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Prop`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Type`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `additional?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Supporting text displayed below list item contents.`)))), mdx(\"hr\", null), mdx(\"h2\", null, `Guidelines`), mdx(\"h3\", null, `About Lists`), mdx(\"p\", null, `Lists are a grouping of list items that are represented consecutively one after the other and delineated by numeric, bulleted or iconic markings. Lists may be ordered or unordered. If the meaning of the content would change be reordering the list items, use an ordered (numbered) list. Otherwise use an unordered (bulleted, icon) list.`), mdx(\"h3\", null, `Accessibility`), mdx(\"p\", null, `Always group `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ListItem`), ` within a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` component. When nesting lists, ensure that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ListItem`), ` is a direct descendant of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), `.`), mdx(\"hr\", null), mdx(\"h2\", null, `Composition`), mdx(\"p\", null, `Of the available list variants, numbered is the only one which provides semantic meaning to the order of items.`), mdx(Guidelines, {\n    mdxType: \"Guidelines\"\n  }, mdx(Do, {\n    mdxType: \"Do\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Use bulleted or icon lists for more randomized lists.\"), mdx(\"li\", null, \"Use nested lists to provide additional, related information to parent list items.\"))), mdx(DoNot, {\n    mdxType: \"DoNot\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Use a numbered list or a nested list where items don't have a specific order.\"), mdx(\"li\", null, \"Use nested lists that contain items that are unrelated to the parent list item.\")))), mdx(\"hr\", null), mdx(\"h2\", null, `Examples`), mdx(\"h3\", null, `Bulleted`), mdx(\"p\", null, `Use the bulleted variant for lists with no significant meaning to the order of items. This is the default `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` variant.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<List>\n  <ListItem>Rufus T. Firefly</ListItem>\n  <ListItem>Otis B. Driftwood</ListItem>\n  <ListItem>Captain Geoffrey T. Spaulding</ListItem>\n</List>\n`)), mdx(\"h3\", null, `Numbered`), mdx(\"p\", null, `Use the numbered variant for lists with any significance to the order of items.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<List variant=\"numbered\">\n  <ListItem>The Cocoanuts</ListItem>\n  <ListItem>Animal Crackers</ListItem>\n  <ListItem>Monkey Business</ListItem>\n  <ListItem>Horse Feathers</ListItem>\n  <ListItem>Duck Soup</ListItem>\n</List>\n`)), mdx(\"h3\", null, `Nested`), mdx(\"p\", null, `Lists may be nested within other list items.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<List variant=\"numbered\">\n  <ListItem>\n    The party of the first part shall be known in this contract as the party of\n    the first part.\n    <List>\n      <ListItem>\n        The first part of the party of the first part shall be known in this\n        contract as the first part of the party of the first part.\n      </ListItem>\n    </List>\n  </ListItem>\n  <ListItem>\n    The party of the second part shall be known in this contract as the party of\n    the second part.\n  </ListItem>\n</List>\n`)), mdx(\"h3\", null, `Additional Text`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <List variant=\"bulleted\" marginBottom=\"scale180\">\n    <ListItem additional=\"aka Chico\">Leonard Joseph Marx</ListItem>\n  </List>\n  <List variant=\"numbered\" marginBottom=\"scale180\">\n    <ListItem additional=\"aka Groucho\">Julius Henry Marx</ListItem>\n  </List>\n  <List variant=\"icon\">\n    <ListItem additional=\"aka Zeppo\">Herbert Manfred Marx</ListItem>\n  </List>\n</>\n`)), mdx(\"h3\", null, `Icon`), mdx(\"p\", null, `Use the icon variant for decorative lists with no significant meaning to the order of items.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<List variant=\"icon\">\n  <ListItem>A Night at the Opera</ListItem>\n  <ListItem>A Day at the Races</ListItem>\n  <ListItem>A Night in Casablanca</ListItem>\n</List>\n`)), mdx(\"h3\", null, `Inverse`), mdx(\"p\", null, `All `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` variants support inverse themes.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live bg=darkest\",\n    \"live\": true,\n    \"bg\": \"darkest\"\n  }, `<>\n  <List inverse variant=\"bulleted\" marginBottom=\"scale180\">\n    <ListItem>Go West</ListItem>\n  </List>\n  <List inverse variant=\"numbered\" marginBottom=\"scale180\">\n    <ListItem>Room Service</ListItem>\n  </List>\n  <List inverse variant=\"icon\">\n    <ListItem>The Big Store</ListItem>\n  </List>\n</>\n`)), mdx(\"h3\", null, `Size`), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` component supports normal and small sizes.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, `<>\n  <List size=\"normal\" marginBottom=\"scale180\">\n    <ListItem additional=\"aka Harpo\">Arthur Marx</ListItem>\n  </List>\n  <List size=\"small\">\n    <ListItem additional=\"aka Gummo\">Milton Marx</ListItem>\n  </List>\n</>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"69bc5b5e-eefd-58df-9e17-7578679e5d7b"}},"staticQueryHashes":["1936978686"]}