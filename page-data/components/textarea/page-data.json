{"componentChunkName":"component---src-templates-doc-tsx","path":"/components/textarea/","result":{"data":{"mdx":{"fields":{"title":"Textarea","description":"The textarea component allows users to input multiple lines of text.","slug":"/components/textarea/","figma":"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=1166%3A3032","github":"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/textarea"},"frontmatter":{"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/c5b79/textarea.png","srcSet":"/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/41a78/textarea.png 95w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/88a50/textarea.png 190w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/c5b79/textarea.png 380w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/1ad25/textarea.png 760w","sizes":"(min-width: 380px) 380px, 100vw"},"sources":[{"srcSet":"/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/22533/textarea.webp 95w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/f6c68/textarea.webp 190w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/eabfd/textarea.webp 380w,\n/static/d0974a6b9b4ddd0e8b2843cb7f5cf66e/22db1/textarea.webp 760w","type":"image/webp","sizes":"(min-width: 380px) 380px, 100vw"}]},"width":380,"height":289}}}},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": \"textarea\",\n  \"title\": \"Textarea\",\n  \"section\": \"Components\",\n  \"description\": \"The textarea component allows users to input multiple lines of text.\",\n  \"image\": \"../../images/docs/components/textarea.png\",\n  \"figma\": \"https://www.figma.com/file/oYazzpZ4XWFUlwD1pDHNms/Core-Components?node-id=1166%3A3032\",\n  \"github\": \"https://github.com/twilio-labs/match/tree/main/packages/match-components/src/textarea\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Code`), mdx(\"h3\", null, `Usage`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, `import { Formik } from \"formik\";\nimport { Textarea, Form } from \"@twilio-labs/match/components\";\n\nconst Component = () => (\n  <Formik initialValues={{ message: \"\" }} onSubmit={() => {}}>\n    <Form>\n      <Textarea name=\"message\" label=\"Message\" />\n    </Form>\n  </Formik>\n);\n`)), mdx(\"h3\", null, `Props`), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Prop`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Type`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default`), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `name`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `label`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `required?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input as required.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `disabled?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Disables the input.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `readOnly?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input as readonly.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `hideLabel?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Visually hides the label.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `placeholder?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Sets the input's placeholder text.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `additional?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Supporting validation instructions.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `minLength?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `number`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Minimum character count.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `maxLength?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `number`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Maximum character count.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `rows?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `number`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `3`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Default number of rows to display (3-10).`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `resize?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `TextareaResizeOptions`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'manual'`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `'manual', 'smart'`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `validate?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `(value: string) => string`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Overrides built in validation.`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `noValidate?`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `boolean`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `null`), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, `Disables built in validation.`)))), mdx(\"p\", null, `Also supports `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/#margin-props\"\n  }, `margin`), ` props.`), mdx(\"hr\", null), mdx(\"h2\", null, `Guidelines`), mdx(\"h3\", null, `About Textareas`), mdx(\"p\", null, `Textareas are interactive form controls that accept multiple lines of text from a user. They accept any combination of letters, number, symbols and line breaks.`), mdx(\"h3\", null, `Accessibility`), mdx(\"p\", null, `Here are some quick accessibility tips to ensure a positive user experience for all users.`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Always include a descriptive label for each Textarea.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Do not use placeholder text as a replacement for labels.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Always allow textareas to be resized manually or automatically.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `additional`), ` rovide information on how to pass the Textarea's validation.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Use error messages to provide information on how to correct invalid data.`)), mdx(\"hr\", null), mdx(\"h2\", null, `Composition`), mdx(\"p\", null, `All Textareas must include a label. A label may be visually hidden only if the purpose of the Textarea is abundantly apparent. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `hideLabel`), ` prop will remove the label entirely and apply an `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `aria-label`), ` to the textarea element for screen readers.`), mdx(\"p\", null, `Labels should be short and descriptive with any instructional text belonging in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `additional`), `.p supplemental additional tconcise and relevant to the textarea's validation requirements.`), mdx(\"p\", null, `When a Textarea contains invalid data, provide an error message with instructional cues on how to make the correction. Any `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `additional`), ` provided with the Textarea will be replaced by the validation error. Be sure to repeat any relevant information that would have been lost.`), mdx(\"p\", null, `Textarea should only be used on a white background.`), mdx(Guidelines, {\n    mdxType: \"Guidelines\"\n  }, mdx(Do, {\n    mdxType: \"Do\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Use a textarea for a longer entry and a text input for short entries.\"), mdx(\"li\", null, \"Only use placeholder text when clarification is required, try not to overuse it.\"), mdx(\"li\", null, \"Use help text to provide additional information to the user that could help prevent errors.\"), mdx(\"li\", null, \"Make sure every textarea has a label.\"), mdx(\"li\", null, \"Use disabled to show a user that an input can not be interacted with yet.\"))), mdx(DoNot, {\n    mdxType: \"DoNot\"\n  }, mdx(\"ul\", null, mdx(\"li\", null, \"Don\\u2019t use a textarea for a short text entry.\"), mdx(\"li\", null, \"Don\\u2019t use placeholder text for every field.\"), mdx(\"li\", null, \"Don\\u2019t use placeholder text to provide error preventing information.\"), mdx(\"li\", null, \"Don\\u2019t use placeholder or help text in place of a label.\"), mdx(\"li\", null, \"Don\\u2019t use disabled to show information in an input that cannot be edited.\")))), mdx(\"hr\", null), mdx(\"h2\", null, `Examples`), mdx(\"h3\", null, `Textarea with Help Text`), mdx(\"p\", null, `Labels and help text are controlled via the Textarea component props in order to ensure consistency and accessibility best practices.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live fullWidth\",\n    \"live\": true,\n    \"fullWidth\": true\n  }, `<Formik initialValues={{ message: \"\" }} onSubmit={() => {}}>\n  <Form>\n    <Textarea\n      name=\"message\"\n      label=\"Message\"\n      additional=\"e a brief message\"\n      required\n    />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Textarea with Error`), mdx(\"p\", null, `Textareas come with basic `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\"\n  }, `constraint validation`), ` enabled by default. You may override the built in validation with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `validate`), ` prop, or completely disable with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `noValidate`), `. For more advanced validation please read the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://formik.org/docs/guides/validation\"\n  }, `Formik documentation`), `. Note that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `additional`), ` is replaced by the validation error.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live fullWidth\",\n    \"live\": true,\n    \"fullWidth\": true\n  }, `<Formik\n  validateOnMount\n  initialTouched={{ message: true }}\n  initialValues={{ message: \"\" }}\n  onSubmit={() => {}}\n>\n  <Form>\n    <Textarea\n      name=\"message\"\n      label=\"Message\"\n      additional=\"e a brief message\"\n      required\n    />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Disabled Textarea`), mdx(\"p\", null, `Disabled form fields cannot be interacted with. Use a read-only field for showing static information which cannot be edited.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live fullWidth\",\n    \"live\": true,\n    \"fullWidth\": true\n  }, `<Formik initialValues={{ message: \"\" }} onSubmit={() => {}}>\n  <Form>\n    <Textarea name=\"message\" label=\"Message\" disabled />\n  </Form>\n</Formik>\n`)), mdx(\"h3\", null, `Read-only Textarea`), mdx(\"p\", null, `Read-only textareas can be focused but cannot be edited. Use a read-only Textarea when a user should be able to select and copy the text within. An example of when to use a read-only textarea may be displaying a user's responses after a form has been submitted.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live fullWidth\",\n    \"live\": true,\n    \"fullWidth\": true\n  }, `<Formik\n  initialValues={{\n    message:\n      \"Gentlemen? In re yours of the 5th inst., yours to hand and beg to rep., brackets, that we have gone over the ground carefully and we seem to believe, i.e., to wit., e.g., in lieu, that despite all our precautionary measures which have been involved, we seem to believe that it is hardly necessary for us to proceed unless we receive an ipso facto that is not negligible at this moment. Hoping this finds you, I beg to remain, as of June 9, cordially yours, Regards.\",\n  }}\n  onSubmit={() => {}}\n>\n  <Form>\n    <Textarea readOnly name=\"message\" label=\"Message\" />\n  </Form>\n</Formik>\n`)), mdx(\"h2\", null, `Smart Resize`), mdx(\"p\", null, `Smart resize will dynamically adjust the texarea's height as a user types. Height is constrained to a minimum of 3 visible rows and a maximum of 10.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live fullWidth\",\n    \"live\": true,\n    \"fullWidth\": true\n  }, `<Formik initialValues={{ message: \"\" }} onSubmit={() => {}}>\n  <Form>\n    <Textarea name=\"message\" label=\"Message\" resize=\"smart\" />\n  </Form>\n</Formik>\n`)));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"803edd2a-e160-5f9e-a189-075f398c3b88"}},"staticQueryHashes":["1936978686"]}