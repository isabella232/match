{"componentChunkName":"component---src-templates-doc-tsx","path":"/design-tokens/tokens/","result":{"data":{"mdx":{"fields":{"title":"Token List","description":"Design tokens are tiny pieces of UI information that are used to ensure brand consistency and product design-engineer collaboration across all properties.","slug":"/design-tokens/tokens/","figma":"","github":""},"frontmatter":{"image":null},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": \"tokens\",\n  \"order\": 2,\n  \"title\": \"Token List\",\n  \"section\": \"Design Tokens\",\n  \"image\": \"../../images/docs/design-tokens.png\",\n  \"description\": \"Design tokens are tiny pieces of UI information that are used to ensure brand consistency and product design-engineer collaboration across all properties.\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TokenList, {\n    mdxType: \"TokenList\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"fa649b98-e303-501f-9866-977e476e1501"}},"staticQueryHashes":["1936978686"]}